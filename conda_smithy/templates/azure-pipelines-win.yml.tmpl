# This file was generated automatically from conda-smithy. To update this configuration,
# update the conda-forge.yml and/or the recipe/meta.yaml.
# -*- mode: yaml -*-

jobs:
- job: win
  {{ azure_yaml|indent(2) }}
  steps:
{%- if clone_depth is not none %}
    - checkout: self
      fetchDepth: {{ clone_depth }}
{%- endif %}
{%- for choco_pkg in choco %}
    - script: |
        choco install {{ choco_pkg }} -fdv -y --debug
      displayName: "Install Chocolatey Package: {{ choco_pkg }}"
{% endfor %}

{%- if build_with_mambabuild %}
{%- set BOA="boa " %}
{%- else %}
{%- set BOA="" %}
{%- endif %}
    - task: PythonScript@0
      displayName: 'Download Miniforge'
      inputs:
        scriptSource: inline
        script: |
          import urllib.request
          url = 'https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-Windows-x86_64.exe'
          path = r"$(Build.ArtifactStagingDirectory)/Miniforge.exe"
          urllib.request.urlretrieve(url, path)

    - script: |
        start /wait "" %BUILD_ARTIFACTSTAGINGDIRECTORY%\Miniforge.exe /InstallationType=JustMe /RegisterPython=0 /S /D=C:\Miniforge
      displayName: Install Miniforge

    - powershell: Write-Host "##vso[task.prependpath]C:\Miniforge\Scripts"
      displayName: Add conda to PATH

    - script: |
        call activate base
        mamba.exe install 'python=3.9' conda-build conda pip {{ BOA }}'{{ " ".join(remote_ci_setup) }}' -c conda-forge --strict-channel-priority --yes
      displayName: Install conda-build

    - script: set PYTHONUNBUFFERED=1
      displayName: Set PYTHONUNBUFFERED

    # Configure the VM
    - script: |
        call activate base
        {%- if local_ci_setup %}
        conda.exe uninstall --quiet --yes --force {{ " ".join(remote_ci_setup) }}
        pip install --no-deps ".\{{ recipe_dir }}\."
        {%- endif %}
        setup_conda_rc .\ ".\{{ recipe_dir }}" .\.ci_support\%CONFIG%.yaml
      displayName: conda-forge CI setup

    {% if build_setup -%}
    # Configure the VM.
    - script: |
        set "CI=azure"
        call activate base
        {{ build_setup.replace("\n", "\n        ").rstrip() }}
      displayName: conda-forge build setup
    {% endif %}

    - script: |
        call activate base
        {%- if build_with_mambabuild %}
        conda.exe mambabuild "{{ recipe_dir }}" -m .ci_support\%CONFIG%.yaml --suppress-variables
        {%- else %}
        conda.exe build "{{ recipe_dir }}" -m .ci_support\%CONFIG%.yaml --suppress-variables
        {%- endif %}
      displayName: Build recipe
      env:
        PYTHONUNBUFFERED: 1

{%- if azure.store_build_artifacts %}
    - script: |
        set CI=azure
        set CI_RUN_ID=$(build.BuildNumber).$(system.JobAttempt)
        set FEEDSTOCK_NAME=$(build.Repository.Name)
        set ARTIFACT_STAGING_DIR=$(Build.ArtifactStagingDirectory)
        set CONDA_BLD_DIR=$(CONDA_BLD_PATH)
        set BLD_ARTIFACT_PREFIX=conda_artifacts
        if "%AGENT_JOBSTATUS%" == "Failed" (
            set ENV_ARTIFACT_PREFIX=conda_envs
        )
        call ".scripts\create_conda_build_artifacts.bat"
      displayName: Prepare conda build artifacts
      condition: succeededOrFailed()

    - task: PublishPipelineArtifact@1
      displayName: Store conda build artifacts
      condition: not(eq(variables.BLD_ARTIFACT_PATH, ''))
      inputs:
        targetPath: $(BLD_ARTIFACT_PATH)
        artifactName: $(BLD_ARTIFACT_NAME)

    - task: PublishPipelineArtifact@1
      displayName: Store conda build environment artifacts
      condition: not(eq(variables.ENV_ARTIFACT_PATH, ''))
      inputs:
        targetPath: $(ENV_ARTIFACT_PATH)
        artifactName: $(ENV_ARTIFACT_NAME)
{%- endif %}

{%- if conda_forge_output_validation %}
    - script: |
        set "FEEDSTOCK_NAME=%BUILD_REPOSITORY_NAME:*/=%"
        call activate base
        validate_recipe_outputs "%FEEDSTOCK_NAME%"
      displayName: Validate Recipe Outputs
{%- endif %}

    - script: |
        set "GIT_BRANCH=%BUILD_SOURCEBRANCHNAME%"
        set "FEEDSTOCK_NAME=%BUILD_REPOSITORY_NAME:*/=%"
{%- if upload_on_branch %}
        set "UPLOAD_ON_BRANCH={{ upload_on_branch }}"
{%- endif %}
        call activate base
        upload_package {% if conda_forge_output_validation %}--validate --feedstock-name="%FEEDSTOCK_NAME%"{% endif %}{% if private_upload %} --private{% endif %} .\ ".\{{ recipe_dir }}" .ci_support\%CONFIG%.yaml
      displayName: Upload package
      env:
{%- for secret in secrets %}
        {{ secret }}: $({{ secret }})
{%- endfor %}
      condition: and(succeeded(), not(eq(variables['UPLOAD_PACKAGES'], 'False')), not(eq(variables['Build.Reason'], 'PullRequest')))
