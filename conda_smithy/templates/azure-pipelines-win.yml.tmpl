# This file was generated automatically from conda-smithy. To update this configuration,
# update the conda-forge.yml and/or the recipe/meta.yaml.
# -*- mode: yaml -*-

jobs:
- job: win
  {{ azure_yaml|indent(2) }}
  steps:
{%- if clone_depth is not none %}
    - checkout: self
      fetchDepth: {{ clone_depth }}
{%- endif %}
{%- for choco_pkg in choco %}
    - script: |
        choco install {{ choco_pkg }} -fdv -y --debug
      displayName: "Install Chocolatey Package: {{ choco_pkg }}"
{% endfor %}
    - script: |
        choco install vcpython27 -fdv -y --debug
      condition: contains(variables['CONFIG'], 'vs2008')
      displayName: Install vcpython27.msi (if needed)

    # Cygwin's git breaks conda-build. (See https://github.com/conda-forge/conda-smithy-feedstock/pull/2.)
    # - script: rmdir C:\cygwin /s /q
    #   continueOnError: true

    - powershell: |
        Set-PSDebug -Trace 1

        $batchcontent = @"
        ECHO ON
        SET vcpython=C:\Program Files (x86)\Common Files\Microsoft\Visual C++ for Python\9.0

        DIR "%vcpython%"

        CALL "%vcpython%\vcvarsall.bat" %*
        "@

        $batchDir = "C:\Program Files (x86)\Common Files\Microsoft\Visual C++ for Python\9.0\VC"
        $batchPath = "$batchDir" + "\vcvarsall.bat"
        New-Item -Path $batchPath -ItemType "file" -Force

        Set-Content -Value $batchcontent -Path $batchPath

        Get-ChildItem -Path $batchDir

        Get-ChildItem -Path ($batchDir + '\..')

      condition: contains(variables['CONFIG'], 'vs2008')
      displayName: Patch vs2008 (if needed)

{%- if build_with_mambabuild %}
{%- set BOA="boa " %}
{%- else %}
{%- set BOA="" %}
{%- endif %}
    - task: CondaEnvironment@1
      inputs:
        packageSpecs: 'python=3.9 conda-build conda pip {{ BOA }}{{ " ".join(remote_ci_setup) }}' # Optional
        installOptions: "-c conda-forge"
        updateConda: true
      displayName: Install conda-build and activate environment

    - script: set PYTHONUNBUFFERED=1
      displayName: Set PYTHONUNBUFFERED

    # Configure the VM
    - script: |
        call activate base
        {%- if local_ci_setup %}
        conda.exe uninstall --quiet --yes --force conda-forge-ci-setup
        pip install --no-deps ".\{{ recipe_dir }}\."
        {%- endif %}
        setup_conda_rc .\ ".\{{ recipe_dir }}" .\.ci_support\%CONFIG%.yaml
      displayName: conda-forge CI setup

    {% if build_setup -%}
    # Configure the VM.
    - script: |
        set "CI=azure"
        call activate base
        {{ build_setup.replace("\n", "\n        ").rstrip() }}
      displayName: conda-forge build setup
    {% endif %}

    # Special cased version setting some more things!
    - script: |
        call activate base
        conda.exe build "{{ recipe_dir }}" -m .ci_support\%CONFIG%.yaml
      displayName: Build recipe (vs2008)
      env:
        VS90COMNTOOLS: "C:\\Program Files (x86)\\Common Files\\Microsoft\\Visual C++ for Python\\9.0\\VC\\bin"
        PYTHONUNBUFFERED: 1
      condition: contains(variables['CONFIG'], 'vs2008')

    - script: |
        call activate base
        {%- if build_with_mambabuild %}
        conda.exe mambabuild "{{ recipe_dir }}" -m .ci_support\%CONFIG%.yaml --suppress-variables
        {%- else %}
        conda.exe build "{{ recipe_dir }}" -m .ci_support\%CONFIG%.yaml --suppress-variables
        {%- endif %}
      displayName: Build recipe
      env:
        PYTHONUNBUFFERED: 1
      condition: not(contains(variables['CONFIG'], 'vs2008'))

{%- if azure.store_build_artifacts %}
    - script: |
        set CI=azure
        set CI_RUN_ID=$(build.BuildNumber).$(system.JobAttempt)
        set FEEDSTOCK_NAME=$(build.Repository.Name)
        set ARTIFACT_STAGING_DIR=$(Build.ArtifactStagingDirectory)
        set CONDA_BLD_DIR=$(CONDA_BLD_PATH)
        set BLD_ARTIFACT_PREFIX=conda_artifacts
        if "%AGENT_JOBSTATUS%" == "Failed" (
            set ENV_ARTIFACT_PREFIX=conda_envs
        )
        call ".scripts\create_conda_build_artifacts.bat"
      displayName: Prepare conda build artifacts
      condition: succeededOrFailed()

    - task: PublishPipelineArtifact@1
      displayName: Store conda build artifacts
      condition: not(eq(variables.BLD_ARTIFACT_PATH, ''))
      inputs:
        targetPath: $(BLD_ARTIFACT_PATH)
        artifactName: $(BLD_ARTIFACT_NAME)

    - task: PublishPipelineArtifact@1
      displayName: Store conda build environment artifacts
      condition: not(eq(variables.ENV_ARTIFACT_PATH, ''))
      inputs:
        targetPath: $(ENV_ARTIFACT_PATH)
        artifactName: $(ENV_ARTIFACT_NAME)
{%- endif %}

{%- if conda_forge_output_validation %}
    - script: |
        set "FEEDSTOCK_NAME=%BUILD_REPOSITORY_NAME:*/=%"
        call activate base
        validate_recipe_outputs "%FEEDSTOCK_NAME%"
      displayName: Validate Recipe Outputs
{%- endif %}

    - script: |
        set "GIT_BRANCH=%BUILD_SOURCEBRANCHNAME%"
        set "FEEDSTOCK_NAME=%BUILD_REPOSITORY_NAME:*/=%"
{%- if upload_on_branch %}
        set "UPLOAD_ON_BRANCH={{ upload_on_branch }}"
{%- endif %}
        call activate base
        upload_package {% if conda_forge_output_validation %}--validate --feedstock-name="%FEEDSTOCK_NAME%"{% endif %}{% if private_upload %} --private{% endif %} .\ ".\{{ recipe_dir }}" .ci_support\%CONFIG%.yaml
      displayName: Upload package
      env:
{%- for secret in secrets %}
        {{ secret }}: $({{ secret }})
{%- endfor %}
      condition: and(succeeded(), not(eq(variables['UPLOAD_PACKAGES'], 'False')), not(eq(variables['Build.Reason'], 'PullRequest')))
