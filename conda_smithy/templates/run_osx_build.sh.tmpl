#!/usr/bin/env bash

# -*- mode: jinja-shell -*-

source .scripts/logging_utils.sh

set -xe

MINIFORGE_HOME=${MINIFORGE_HOME:-${HOME}/miniforge3}
MINIFORGE_HOME=${MINIFORGE_HOME%/} # remove trailing slash

{%- if conda_install_tool == "micromamba" %}

( startgroup "Provisioning base env with micromamba" ) 2> /dev/null
MICROMAMBA_VERSION="1.5.10-0"
if [[ "$(uname -m)" == "arm64" ]]; then
  osx_arch="osx-arm64"
else
  osx_arch="osx-64"
fi
MICROMAMBA_URL="https://github.com/mamba-org/micromamba-releases/releases/download/${MICROMAMBA_VERSION}/micromamba-${osx_arch}"
MAMBA_ROOT_PREFIX="${MINIFORGE_HOME}-micromamba-$(date +%s)"
echo "Downloading micromamba ${MICROMAMBA_VERSION}"
micromamba_exe="$(mktemp -d)/micromamba"
curl -L -o "${micromamba_exe}" "${MICROMAMBA_URL}"
chmod +x "${micromamba_exe}"
echo "Creating environment"
"${micromamba_exe}" create --yes --root-prefix "${MAMBA_ROOT_PREFIX}" --prefix "${MINIFORGE_HOME}" \
  --channel conda-forge \
  pip {{ conda_build_tool_deps }} {{ " ".join(remote_ci_setup) }}
echo "Moving pkgs cache from ${MAMBA_ROOT_PREFIX} to ${MINIFORGE_HOME}"
mv "${MAMBA_ROOT_PREFIX}/pkgs" "${MINIFORGE_HOME}"
echo "Cleaning up micromamba"
rm -rf "${MAMBA_ROOT_PREFIX}" "${micromamba_exe}" || true
( endgroup "Provisioning base env with micromamba" ) 2> /dev/null
{%- elif conda_install_tool == "pixi" %}
( startgroup "Provisioning base env with pixi" ) 2> /dev/null
mkdir -p ${MINIFORGE_HOME}
curl -fsSL https://pixi.sh/install.sh | bash
export PATH="~/.pixi/bin:$PATH"
arch=$(uname -m)
if [[ "$arch" == "x86_64" ]]; then
  arch="64"
fi
sed -i.bak "s/platforms = .*/platforms = [\"osx-${arch}\"]/" pixi.toml
echo "Creating environment"
pixi install
pixi list
echo "Activating environment"
eval "$(pixi shell-hook)"
mv pixi.toml.bak pixi.toml
( endgroup "Provisioning base env with pixi" ) 2> /dev/null
{%- else %}
( startgroup "Installing a fresh version of Miniforge" ) 2> /dev/null

MINIFORGE_URL="https://github.com/conda-forge/miniforge/releases/latest/download"
MINIFORGE_FILE="Miniforge3-MacOSX-$(uname -m).sh"
curl -L -O "${MINIFORGE_URL}/${MINIFORGE_FILE}"
rm -rf "${MINIFORGE_HOME}"
bash "${MINIFORGE_FILE}" -b -p "${MINIFORGE_HOME}"

( endgroup "Installing a fresh version of Miniforge" ) 2> /dev/null
{%- endif %}

( startgroup "Configuring conda" ) 2> /dev/null
{%- if conda_build_tool == "mambabuild" %}
{%- set BUILD_CMD="conda-mambabuild" %}
{%- elif conda_build_tool == "conda-build+conda-libmamba-solver" %}
{%- set BUILD_CMD="CONDA_SOLVER=libmamba conda-build" %}
{%- elif conda_build_tool == "conda-build+classic" %}
{%- set BUILD_CMD="CONDA_SOLVER=classic conda-build" %}
{%- elif conda_build_tool == "rattler-build" %}
{%- set BUILD_CMD="rattler-build build" %}
{%- else %}
{%- set BUILD_CMD="conda-build" %}
{%- endif %}

{%- if conda_install_tool != "pixi" %}
echo "Activating environment"
source "${MINIFORGE_HOME}/etc/profile.d/conda.sh"
conda activate base
{%- endif %}
{%- if conda_solver %}
export CONDA_SOLVER="{{ conda_solver }}"
{%- endif %}
{%- if conda_solver == "libmamba" %}
export CONDA_LIBMAMBA_SOLVER_NO_CHANNELS_FROM_INSTALLED=1
{%- endif %}

{% if conda_install_tool in ("conda", "mamba") -%}
{{ conda_install_tool }} install --update-specs --quiet --yes --channel conda-forge --strict-channel-priority \
    pip {{ conda_install_tool_deps }} {{ conda_build_tool_deps }} {{ " ".join(remote_ci_setup) }}
{%- endif %}

{% if local_ci_setup %}
conda uninstall --quiet --yes --force {{ " ".join(remote_ci_setup) }}
pip install --no-deps {{ recipe_dir }}/.
{%- endif %}

echo -e "\n\nSetting up the condarc and mangling the compiler."
setup_conda_rc ./ ./{{ recipe_dir }} ./.ci_support/${CONFIG}.yaml

if [[ "${CI:-}" != "" ]]; then
  mangle_compiler ./ ./{{ recipe_dir }} .ci_support/${CONFIG}.yaml
fi

if [[ "${CI:-}" != "" ]]; then
  echo -e "\n\nMangling homebrew in the CI to avoid conflicts."
  /usr/bin/sudo mangle_homebrew
  /usr/bin/sudo -k
else
  echo -e "\n\nNot mangling homebrew as we are not running in CI"
fi

if [[ "${sha:-}" == "" ]]; then
  sha=$(git rev-parse HEAD)
fi

{% if build_setup -%}
echo -e "\n\nRunning the build setup script."
{{ build_setup }}
{%- endif %}

( endgroup "Configuring conda" ) 2> /dev/null


{%- if conda_build_tool != "rattler-build" %}

echo -e "\n\nMaking the build clobber file"
make_build_number ./ ./{{ recipe_dir }} ./.ci_support/${CONFIG}.yaml

{%- endif %}

if [[ -f LICENSE.txt ]]; then
  cp LICENSE.txt "{{ recipe_dir }}/recipe-scripts-license.txt"
fi

if [[ "${BUILD_WITH_CONDA_DEBUG:-0}" == 1 ]]; then
  {%- if conda_build_tool != "rattler-build" %}
    if [[ "x${BUILD_OUTPUT_ID:-}" != "x" ]]; then
        EXTRA_CB_OPTIONS="${EXTRA_CB_OPTIONS:-} --output-id ${BUILD_OUTPUT_ID}"
    fi
    conda debug ./{{ recipe_dir }} -m ./.ci_support/${CONFIG}.yaml \
        ${EXTRA_CB_OPTIONS:-} \
        --clobber-file ./.ci_support/clobber_${CONFIG}.yaml

    # Drop into an interactive shell
    /bin/bash
  {%- else %}
    echo "rattler-build does not currently support debug mode"
  {%- endif %}
else
{% if test in ["native", "native_and_emulated"] %}
    if [[ "${HOST_PLATFORM}" != "${BUILD_PLATFORM}" ]]; then
        EXTRA_CB_OPTIONS="${EXTRA_CB_OPTIONS:-} --no-test"
    fi
{% endif %}
    {%- if conda_build_tool != "rattler-build" %}
    {{ BUILD_CMD }} ./{{ recipe_dir }} -m ./.ci_support/${CONFIG}.yaml \
        --suppress-variables ${EXTRA_CB_OPTIONS:-} \
        --clobber-file ./.ci_support/clobber_${CONFIG}.yaml \
        --extra-meta flow_run_id="$flow_run_id" remote_url="$remote_url" sha="$sha"

    {%- else %}
    {{ BUILD_CMD }} --recipe ./{{ recipe_dir }} \
        -m ./.ci_support/${CONFIG}.yaml \
        --output-dir ${MINIFORGE_HOME}/conda-bld ${EXTRA_CB_OPTIONS:-} \
        --target-platform "${HOST_PLATFORM}" \
        --extra-meta flow_run_id="$flow_run_id" \
        --extra-meta remote_url="$remote_url" \
        --extra-meta sha="$sha"

    {%- endif %}

    ( startgroup "Inspecting artifacts" ) 2> /dev/null

    # inspect_artifacts was only added in conda-forge-ci-setup 4.9.4
    command -v inspect_artifacts >/dev/null 2>&1 && inspect_artifacts --recipe-dir ./{{ recipe_dir }} -m ./.ci_support/${CONFIG}.yaml || echo "inspect_artifacts needs conda-forge-ci-setup >=4.9.4"

    ( endgroup "Inspecting artifacts" ) 2> /dev/null

    {%- if conda_forge_output_validation %}
    ( startgroup "Validating outputs" ) 2> /dev/null

    validate_recipe_outputs "${FEEDSTOCK_NAME}"

    ( endgroup "Validating outputs" ) 2> /dev/null
    {%- endif %}

    ( startgroup "Uploading packages" ) 2> /dev/null

    if [[ "${UPLOAD_PACKAGES}" != "False" ]] && [[ "${IS_PR_BUILD}" == "False" ]]; then
      upload_package {% if conda_forge_output_validation %}--validate --feedstock-name="${FEEDSTOCK_NAME}"{% endif %}{% if private_upload %} --private{% endif %} ./ ./{{ recipe_dir }} ./.ci_support/${CONFIG}.yaml
    fi

    ( endgroup "Uploading packages" ) 2> /dev/null
fi
