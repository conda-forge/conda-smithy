#!/usr/bin/env bash

# -*- mode: jinja-shell -*-

source .scripts/logging_utils.sh

set -xe

MINIFORGE_HOME=${MINIFORGE_HOME:-${HOME}/miniforge3}

( startgroup "Installing a fresh version of Miniforge" ) 2> /dev/null

MINIFORGE_URL="https://github.com/conda-forge/miniforge/releases/latest/download"
MINIFORGE_FILE="Mambaforge-MacOSX-$(uname -m).sh"
curl -L -O "${MINIFORGE_URL}/${MINIFORGE_FILE}"
rm -rf ${MINIFORGE_HOME}
bash $MINIFORGE_FILE -b -p ${MINIFORGE_HOME}

( endgroup "Installing a fresh version of Miniforge" ) 2> /dev/null

( startgroup "Configuring conda" ) 2> /dev/null
{% if build_with_mambabuild %}
{%- set CONDA_INSTALL_CMD="mamba" %}
{%- set GET_BOA=" boa" %}
{%- set BUILD_CMD="mambabuild" %}
{%- else %}
{%- set CONDA_INSTALL_CMD="mamba" %}
{%- set GET_BOA="" %}
{%- set BUILD_CMD="build" %}
{%- endif %}
source ${MINIFORGE_HOME}/etc/profile.d/conda.sh
conda activate base

echo -e "\n\nInstalling {{ remote_ci_setup }} and conda-build."
{{ CONDA_INSTALL_CMD }} install -n base --update-specs --quiet --yes "{{ remote_ci_setup }}" conda-build pip{{ GET_BOA }}
{%- if build_with_mambabuild %}
{{ CONDA_INSTALL_CMD }} update -n base --update-specs --quiet --yes "{{ remote_ci_setup }}" conda-build pip{{ GET_BOA }}
{%- endif %}
{%- if use_lief_dev_202202 %}
{{ CONDA_INSTALL_CMD }} update -n base --update-specs --quiet --yes -c conda-forge/label/lief_dev -c conda-forge py-lief
{%- endif %}

{% if local_ci_setup %}
conda uninstall --quiet --yes --force "{{ remote_ci_setup }}"
pip install --no-deps {{ recipe_dir }}/.
{%- endif %}

echo -e "\n\nSetting up the condarc and mangling the compiler."
setup_conda_rc ./ ./{{ recipe_dir }} ./.ci_support/${CONFIG}.yaml

if [[ "${CI:-}" != "" ]]; then
  mangle_compiler ./ ./{{ recipe_dir }} .ci_support/${CONFIG}.yaml
fi

if [[ "${CI:-}" != "" ]]; then
  echo -e "\n\nMangling homebrew in the CI to avoid conflicts."
  /usr/bin/sudo mangle_homebrew
  /usr/bin/sudo -k
else
  echo -e "\n\nNot mangling homebrew as we are not running in CI"
fi

{% if build_setup -%}
echo -e "\n\nRunning the build setup script."
{{ build_setup }}
{%- endif %}

( endgroup "Configuring conda" ) 2> /dev/null


echo -e "\n\nMaking the build clobber file"
make_build_number ./ ./{{ recipe_dir }} ./.ci_support/${CONFIG}.yaml
{% if test in ["native", "native_and_emulated"] %}
if [[ "${HOST_PLATFORM}" != "${BUILD_PLATFORM}" ]]; then
    EXTRA_CB_OPTIONS="${EXTRA_CB_OPTIONS:-} --no-test"
fi
{% endif %}
conda {{ BUILD_CMD }} ./{{ recipe_dir }} -m ./.ci_support/${CONFIG}.yaml --suppress-variables --clobber-file ./.ci_support/clobber_${CONFIG}.yaml ${EXTRA_CB_OPTIONS:-}


{%- if conda_forge_output_validation %}
( startgroup "Validating outputs" ) 2> /dev/null

validate_recipe_outputs "${FEEDSTOCK_NAME}"

( endgroup "Validating outputs" ) 2> /dev/null
{%- endif %}

( startgroup "Uploading packages" ) 2> /dev/null

if [[ "${UPLOAD_PACKAGES}" != "False" ]] && [[ "${IS_PR_BUILD}" == "False" ]]; then
  upload_package {% if conda_forge_output_validation %}--validate --feedstock-name="${FEEDSTOCK_NAME}"{% endif %}{% if private_upload %} --private{% endif %} ./ ./{{ recipe_dir }} ./.ci_support/${CONFIG}.yaml
fi

( endgroup "Uploading packages" ) 2> /dev/null
