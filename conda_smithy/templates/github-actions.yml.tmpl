# This file was generated automatically from conda-smithy. To update this configuration,
# update the conda-forge.yml and/or the recipe/meta.yaml.
# -*- mode: yaml -*-

{%- set platformset = [] %}
{%- for data in configs %}
  {%- set pfarchless = data.build_platform.split('-')[0] %}
  {%- if pfarchless not in platformset %}
    {%- do platformset.append(pfarchless) %}
  {%- endif %}
{%- endfor %}

name: Build conda package
on:
{%- for trigger in github_actions.triggers %}
{%- if trigger == "push" and upload_on_branch %}
  push:
    branches:
      - {{ upload_on_branch }}
{%- else %}
  {{ trigger }}:
{%- endif %}
{% endfor %}

{%- if github_actions.cancel_in_progress %}
concurrency:
  group: {% raw %}${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}{% endraw %}
  cancel-in-progress: true
{%- endif %}

jobs:
  build:
    name: {% raw %}${{ matrix.CONFIG }}{% endraw %}
    runs-on: {% raw %}${{ matrix.runs_on }}{% endraw %}
    timeout-minutes: {{ github_actions.timeout_minutes }}
    strategy:
      fail-fast: false
      {%- if github_actions.max_parallel %}
      max-parallel: {{ github_actions.max_parallel }}
      {%- endif %}
      matrix:
        include:
        {%- for data in configs %}
          - CONFIG: {{ data.config_name }}
        {%- if github_actions.store_build_artifacts %}
            SHORT_CONFIG: {{ data.short_config_name }}
        {%- endif %}
            UPLOAD_PACKAGES: {{ data.upload }}
            os: {{ data.gha_os }}
            runs_on: {{ data.gha_runs_on }}
        {%- if data.build_platform.startswith("linux") %}
            DOCKER_IMAGE: {{ data.config["docker_image"][-1] }}
          {%- if data.gha_with_gpu %}
            CONDA_FORGE_DOCKER_RUN_ARGS: "--gpus all"
          {%- endif %}
        {%- endif %}
        {%- endfor %}
    steps:
{%- if github_actions.free_disk_space %}

    - name: Manage disk space
      if: matrix.os == 'ubuntu'
      run: |
{%- if (github_actions.free_disk_space == true) or ('cache' in github_actions.free_disk_space) %}
        sudo mkdir -p /opt/empty_dir || true
        for d in \
                 /opt/ghc \
                 /opt/hostedtoolcache \
                 /usr/lib/jvm \
                 /usr/local/.ghcup \
                 /usr/local/lib/android \
                 /usr/local/share/powershell \
                 /usr/share/dotnet \
                 /usr/share/swift \
                 ; do
          sudo rsync --stats -a --delete /opt/empty_dir/ $d || true
        done
{%- endif %}
{%- if (github_actions.free_disk_space == true) or ('apt' in github_actions.free_disk_space) %}
        sudo apt-get purge -y -f firefox \
                                 google-chrome-stable \
                                 microsoft-edge-stable
        sudo apt-get autoremove -y >& /dev/null
        sudo apt-get autoclean -y >& /dev/null
{%- endif %}
{%- if (github_actions.free_disk_space is iterable) and ('docker' in github_actions.free_disk_space) %}
        sudo docker image prune --all --force
{%- endif %}
        df -h
{%- endif %}

    - name: Checkout code
      uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4
{%- if clone_depth is not none %}
      with:
        fetch-depth: {{ clone_depth }}
{%- endif %}

    - name: Build on Linux
      if: matrix.os == 'ubuntu'
      env:
        CONFIG: {% raw %}${{ matrix.CONFIG }}{% endraw %}
        UPLOAD_PACKAGES: {% raw %}${{ matrix.UPLOAD_PACKAGES }}{% endraw %}
        DOCKER_IMAGE: {% raw %}${{ matrix.DOCKER_IMAGE }}{% endraw %}
        CI: github_actions
{%- if upload_on_branch %}
        UPLOAD_ON_BRANCH: {{ upload_on_branch }}
{%- endif %}
{%- if docker.run_args is defined %}
        CONDA_FORGE_DOCKER_RUN_ARGS: "{{ docker.run_args }} {% raw %}${{ matrix.CONDA_FORGE_DOCKER_RUN_ARGS }}{% endraw %}"
{%- else %}
        CONDA_FORGE_DOCKER_RUN_ARGS: "{% raw %}${{ matrix.CONDA_FORGE_DOCKER_RUN_ARGS }}{% endraw %}"
{%- endif %}
{%- for secret in secrets %}
        {{ secret }}: {% raw %}${{{% endraw %} secrets.{{ secret }} {% raw %}}}{% endraw %}
{%- endfor %}
      shell: bash
      run: |
        echo "::group::Configure binfmt_misc"
        docker run --rm --privileged multiarch/qemu-user-static:register --reset --credential yes
        export flow_run_id="github_$GITHUB_RUN_ID"
        export remote_url="https://github.com/$GITHUB_REPOSITORY"
        export sha="$GITHUB_SHA"
        export FEEDSTOCK_NAME="$(basename $GITHUB_REPOSITORY)"
        export GIT_BRANCH="$(basename $GITHUB_REF)"
        if [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
          export IS_PR_BUILD="True"
        else
          export IS_PR_BUILD="False"
        fi
        echo "::endgroup::"
        ./.scripts/run_docker_build.sh

    - name: Build on macOS
      if: matrix.os == 'macos'
      env:
        CONFIG: {% raw %}${{ matrix.CONFIG }}{% endraw %}
        UPLOAD_PACKAGES: {% raw %}${{ matrix.UPLOAD_PACKAGES }}{% endraw %}
        CI: github_actions
{%- if upload_on_branch %}
        UPLOAD_ON_BRANCH: {{ upload_on_branch }}
{%- endif %}
{%- for secret in secrets %}
        {{ secret }}: {% raw %}${{{% endraw %} secrets.{{ secret }} {% raw %}}}{% endraw %}
{%- endfor %}
      shell: bash
      run: |
        export flow_run_id="github_$GITHUB_RUN_ID"
        export remote_url="https://github.com/$GITHUB_REPOSITORY"
        export sha="$GITHUB_SHA"
        export FEEDSTOCK_NAME="$(basename $GITHUB_REPOSITORY)"
        export GIT_BRANCH="$(basename $GITHUB_REF)"
        if [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
          export IS_PR_BUILD="True"
        else
          export IS_PR_BUILD="False"
        fi
        ./.scripts/run_osx_build.sh

{%- for choco_pkg in choco %}
    - name: "Install Chocolatey Package: {{ choco_pkg }}"
      if matrix.os == 'windows'
      run: |
        choco install {{ choco_pkg }} -fdv -y --debug
{% endfor %}

    - name: Build on windows
      shell: cmd
      run: |
        set "flow_run_id=github_%GITHUB_RUN_ID%"
        set "remote_url=https://github.com/%GITHUB_REPOSITORY%"
        set "sha=%GITHUB_SHA%"
        call ".scripts\run_win_build.bat"
      env:
        MINIFORGE_HOME: D:\Miniforge
        PYTHONUNBUFFERED: 1
        CONFIG: {% raw %}${{ matrix.CONFIG }}{% endraw %}
        CI: github_actions
        UPLOAD_PACKAGES: {% raw %}${{ matrix.UPLOAD_PACKAGES }}{% endraw %}
{%- if upload_on_branch %}
        UPLOAD_ON_BRANCH: {{ upload_on_branch }}
{%- endif %}
{%- for secret in secrets %}
        {{ secret }}: {% raw %}${{{% endraw %} secrets.{{ secret }} {% raw %}}}{% endraw %}
{%- endfor %}
      if: matrix.os == 'windows'

{%- if github_actions.store_build_artifacts %}
    - name: Prepare conda build artifacts
      id: prepare-artifacts
      shell: bash
      if: {% raw %}${{ always() }}{% endraw %}
      env:
        CONFIG: {% raw %}${{ matrix.CONFIG }}{% endraw %}
        SHORT_CONFIG: {% raw %}${{ matrix.SHORT_CONFIG }}{% endraw %}
        OS: {% raw %}${{ matrix.os }}{% endraw %}
        MINIFORGE_HOME_WIN: D:\Miniforge
      run: |
        export CI=github_actions
        export CI_RUN_ID=$GITHUB_RUN_ID
        export FEEDSTOCK_NAME="$(basename $GITHUB_REPOSITORY)"
        export ARTIFACT_STAGING_DIR="$GITHUB_WORKSPACE"
        if [ $OS == "macos" ]; then
          export CONDA_BLD_DIR="${MINIFORGE_HOME:-${HOME}/miniforge3}/conda-bld"
        elif [ $OS == "windows" ]; then
          export CONDA_BLD_DIR="${MINIFORGE_HOME_WIN//\\//}/conda-bld"
        else
          export CONDA_BLD_DIR="build_artifacts"
        fi
        # Archive everything in CONDA_BLD_DIR except environments
        # Archive the CONDA_BLD_DIR environments only when the job fails
        # Use different prefix for successful and failed build artifacts
        # so random failures don't prevent rebuilds from creating artifacts.
        JOB_STATUS="{% raw %}${{ job.status }}{% endraw %}"
        if [ $JOB_STATUS == "failure" ]; then
          export BLD_ARTIFACT_PREFIX="conda_artifacts"
          export ENV_ARTIFACT_PREFIX="conda_envs"
        else
          export BLD_ARTIFACT_PREFIX="conda_pkgs"
        fi
        ./.scripts/create_conda_build_artifacts.sh
      continue-on-error: true

    - name: Store conda build artifacts
      uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
      if: {% raw %}${{ always() && steps.prepare-artifacts.outcome == 'success' }}{% endraw %}
      with:
        name: {% raw %}${{ steps.prepare-artifacts.outputs.BLD_ARTIFACT_NAME }}{% endraw %}
        path: {% raw %}${{ steps.prepare-artifacts.outputs.BLD_ARTIFACT_PATH }}{% endraw %}
        retention-days: {{ github_actions.artifact_retention_days }}
      continue-on-error: true

    - name: Store conda build environment artifacts
      uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
      if: {% raw %}${{ failure() && steps.prepare-artifacts.outcome == 'success' }}{% endraw %}
      with:
        name: {% raw %}${{ steps.prepare-artifacts.outputs.ENV_ARTIFACT_NAME }}{% endraw %}
        path: {% raw %}${{ steps.prepare-artifacts.outputs.ENV_ARTIFACT_PATH }}{% endraw %}
        retention-days: {{ github_actions.artifact_retention_days }}
      continue-on-error: true
{%- endif %}
