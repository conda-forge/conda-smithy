#!/usr/bin/env bash

# PLEASE NOTE: This script has been automatically generated by conda-smithy. Any changes here
# will be lost next time ``conda smithy rerender`` is run. If you would like to make permanent
# changes to this script, consider a proposal to conda-smithy so that other feedstocks can also
# benefit from the improvement.

set -xeuo pipefail

THISDIR="$( cd "$( dirname "$0" )" >/dev/null && pwd )"
PROVIDER_DIR="$(basename $THISDIR)"

FEEDSTOCK_ROOT=$(cd "$(dirname "$0")/.."; pwd;)
RECIPE_ROOT="${FEEDSTOCK_ROOT}/{{ recipe_dir }}"

docker info

# In order for the conda-build process in the container to write to the mounted
# volumes, we need to run with the same id as the host machine, which is
# normally the owner of the mounted volumes, or at least has write permission
export HOST_USER_ID=$(id -u)
# Check if docker-machine is being used (normally on OSX) and get the uid from
# the VM
if hash docker-machine 2> /dev/null && docker-machine active > /dev/null; then
    export HOST_USER_ID=$(docker-machine ssh $(docker-machine active) id -u)
fi

ARTIFACTS="$FEEDSTOCK_ROOT/build_artifacts"

if [ -z "$CONFIG" ]; then
    echo "Need to set CONFIG env variable"
    exit 1
fi

pip install shyaml
DOCKER_IMAGE=$(cat "${FEEDSTOCK_ROOT}/.ci_support/${CONFIG}.yaml" | shyaml get-value docker_image.0 {{ docker.image }} )

mkdir -p "$ARTIFACTS"
DONE_CANARY="$ARTIFACTS/conda-forge-build-done-${CONFIG}"
rm -f "$DONE_CANARY"

# Set up the docker image that we are going to use.  This is used to install yum requirements at build time if needed
{{ docker.executable }} pull $DOCKER_IMAGE

# If we have yum requirements build a new specialized image that we will use to run our build in that includes
# those dependencies.
pushd ${RECIPE_ROOT}
if [ -f ${RECIPE_ROOT}/yum_requirements.txt ]; then

    cat >Dockerfile.yum <<DOCKERFILE
FROM ${DOCKER_IMAGE}
ADD yum_requirements.txt /opt/requirements.txt
RUN yum -y install \$(cat /opt/requirements.txt)
DOCKERFILE

    export NEW_DOCKER_IMAGE="conda-smithy-$(openssl rand -hex 12)"
    docker build -t ${NEW_DOCKER_IMAGE} --file Dockerfile.yum .
    export DOCKER_IMAGE=$NEW_DOCKER_IMAGE
    echo "Generated new image!"
fi
popd

{%- if docker.interactive is defined %}
    {%- if docker.interactive %}
# Enable running in interactive mode attached to a tty
DOCKER_RUN_ARGS=" -it "
    {%- else %}
# Not all providers run with a real tty.  Disable using one
DOCKER_RUN_ARGS=" "
    {%- endif %}
{%- else %}
DOCKER_RUN_ARGS=" -it "
{%- endif %}

export UPLOAD_PACKAGES="${UPLOAD_PACKAGES:-True}"
{{ docker.executable }} run ${DOCKER_RUN_ARGS} \
    -v "${RECIPE_ROOT}":/home/conda/recipe_root:ro,z \
    -v "${FEEDSTOCK_ROOT}":/home/conda/feedstock_root:rw,z \
    -e CONFIG \
    -e BINSTAR_TOKEN \
    -e HOST_USER_ID \
    -e UPLOAD_PACKAGES \
    $DOCKER_IMAGE \
    {{ docker.command }} \
    /home/conda/feedstock_root/${PROVIDER_DIR}/build_steps.sh



# verify that the end of the script was reached
test -f "$DONE_CANARY"
